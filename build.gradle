import java.nio.file.Files
import static java.nio.file.StandardCopyOption.REPLACE_EXISTING

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: 'maven'
apply plugin: "distribution"

group 'org.logstash.javaapi'
version "${new File("/home/dan/dev/plugins/logstash-output-java_output_example/VERSION").text.trim()}"

description = "Example Java filter implementation"

sourceCompatibility = 1.8
targetCompatibility = 1.8

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.4'
    }
}

repositories {
    mavenCentral()
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.0'
}

apply plugin: 'com.github.johnrengelman.shadow'

shadowJar {
    classifier = null
}

dependencies {
    compile 'org.apache.logging.log4j:log4j-api:2.9.1'
    compile 'org.apache.logging.log4j:log4j-core:2.9.1'
    compile "com.fasterxml.jackson.core:jackson-core:2.9.5"
    compile "com.fasterxml.jackson.core:jackson-databind:2.9.5"
    compile "com.fasterxml.jackson.core:jackson-annotations:2.9.5"
    compile "com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:2.9.5"
    compile fileTree(dir: LOGSTASH_CORE_PATH, include: "**/logstash-core-?.?.?.jar")

    //testCompile "com.fasterxml.jackson.core:jackson-core:2.9.5"
    //testCompile "com.fasterxml.jackson.core:jackson-databind:2.9.5"
    //testCompile "com.fasterxml.jackson.core:jackson-annotations:2.9.5"
    testCompile 'junit:junit:4.12'
    testCompile 'org.jruby:jruby-complete:9.1.13.0'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

task vendor(dependsOn: shadowJar) << {
    String vendorPathPrefix = "vendor/jar-dependencies"
    String projectGroupPath = project.group.replaceAll('\\.', '/')
    File projectJarFile = file("${vendorPathPrefix}/${projectGroupPath}/${project.name}/${project.version}/${project.name}-${project.version}.jar")
    projectJarFile.mkdirs()
    Files.copy(file("$buildDir/libs/${project.name}-${project.version}.jar").toPath(), projectJarFile.toPath(), REPLACE_EXISTING)
}
